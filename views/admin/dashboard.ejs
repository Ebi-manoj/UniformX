<!-- admin-dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <!-- Include Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Include date-fns for date formatting -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/date-fns@2.30.0/index.min.js"></script> -->
  <style>
    :root {
      --primary-color: #4361ee;
      --secondary-color: #3f37c9;
      --success-color: #4caf50;
      --warning-color: #ff9800;
      --danger-color: #f44336;
      --light-color: #f8f9fa;
      --dark-color: #343a40;
      --border-color: #dee2e6;
      --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background-color: #f5f5f7;
      color: #333;
      line-height: 1.6;
    }

    .container {
      width: 95%;
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .dashboard-title {
      font-size: 24px;
      font-weight: 700;
    }

    .filter-controls {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    .filter-button {
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      padding: 8px 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      font-size: 14px;
    }

    .cards-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }

    .card {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: var(--card-shadow);
    }

    .card-header {
      color: #6c757d;
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 15px;
      text-transform: uppercase;
    }

    .card-title {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 15px;
    }

    .card-subtitle {
      font-size: 14px;
      color: #6c757d;
      margin-bottom: 15px;
    }

    .chart-container {
      margin-top: 15px;
      height: 100px;
    }

    .progress-container {
      height: 8px;
      background-color: #e9ecef;
      border-radius: 4px;
      margin: 10px 0;
    }

    .progress-bar {
      height: 100%;
      background-color: var(--primary-color);
      border-radius: 4px;
    }

    .two-column-layout {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 20px;
    }

    .chart-card {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: var(--card-shadow);
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .chart-title {
      font-size: 18px;
      font-weight: 600;
    }

    .filter-dropdown {
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      padding: 6px 12px;
      font-size: 14px;
    }

    .recent-orders {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: var(--card-shadow);
    }

    .recent-orders-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .view-all {
      color: var(--primary-color);
      text-decoration: none;
      font-size: 14px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid var(--border-color);
    }

    th {
      font-size: 14px;
      color: #6c757d;
      font-weight: 600;
    }

    .status-badge {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      display: inline-block;
    }

    .status-processing {
      background-color: #e3f2fd;
      color: #2196f3;
    }

    .status-completed {
      background-color: #e8f5e9;
      color: #4caf50;
    }

    .large-chart-container {
      height: 300px;
      margin-top: 20px;
    }

    .filter-group {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
    }

    .filter-btn {
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 20px;
      padding: 6px 16px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s;
    }

    .filter-btn.active {
      background-color: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }

    .top-lists-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .top-list-card {
      background: white;
      border-radius: 12px;
      padding: 20px;
      box-shadow: var(--card-shadow);
    }

    .top-list-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 15px;
    }

    .top-list {
      list-style: none;
    }

    .top-list-item {
      display: flex;
      justify-content: space-between;
      padding: 10px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .top-list-name {
      font-weight: 500;
    }

    .top-list-value {
      font-weight: 600;
      color: var(--primary-color);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .two-column-layout {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="dashboard-header">
      <h1 class="dashboard-title">Admin Dashboard</h1>
      <div class="filter-controls">
        <button class="filter-button">
          <span>This Month</span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m6 9 6 6 6-6"/></svg>
        </button>
      </div>
    </div>

    <!-- Stats Cards -->
    <div class="cards-container">
      <div class="card">
        <div class="card-header">Total Sales</div>
        <div class="card-subtitle">THIS MONTH</div>
        <div class="card-title">â‚¹<span id="total-sales">4,235</span></div>
        <div class="chart-container">
          <canvas id="sales-chart"></canvas>
        </div>
      </div>

      <div class="card">
        <div class="card-header">Customers</div>
        <div class="card-subtitle">THIS MONTH</div>
        <div class="card-title"><span id="total-customers">2,571</span></div>
        <div class="chart-container">
          <canvas id="customers-chart"></canvas>
        </div>
      </div>

      <div class="card">
        <div class="card-header">Orders</div>
        <div class="card-subtitle">MONTHLY GOAL: 100</div>
        <div class="card-title"><span id="total-orders">734</span></div>
        <div class="progress-container">
          <div class="progress-bar" style="width: 73.4%;"></div>
        </div>
        <div class="card-subtitle"><span id="orders-left">266</span> left</div>
      </div>
    </div>

    <!-- Main chart with filter -->
    <div class="chart-card">
      <div class="chart-header">
        <div class="chart-title">Sales Overview</div>
        <div class="filter-group">
          <button class="filter-btn" data-period="daily">Daily</button>
          <button class="filter-btn active" data-period="weekly">Weekly</button>
          <button class="filter-btn" data-period="monthly">Monthly</button>
          <button class="filter-btn" data-period="yearly">Yearly</button>
        </div>
      </div>
      <div class="large-chart-container">
        <canvas id="main-sales-chart"></canvas>
      </div>
    </div>

    <!-- Two Column Layout -->
    <div class="two-column-layout">
      <!-- Best Selling Chart -->
      <div class="chart-card mt-4">
        <div class="chart-header">
          <div class="chart-title">Best Selling</div>
          <div>THIS MONTH</div>
        </div>
        <h2 class="card-title">$<span id="best-selling-total">2,400</span></h2>
        <div class="card-subtitle">Total Sales</div>
        
        <div style="width: 200px; height: 200px; margin: 0 auto;">
          <canvas id="doughnut-chart"></canvas>
        </div>
        <div style="text-align: center; margin-top: 20px;">
          <div style="font-weight: 600; font-size: 18px;">Classic Monochrome Tees</div>
          <div style="color: #6c757d; margin-top: 5px;">$940 Sales</div>
        </div>
      </div>

      <!-- Recent Orders Table -->
      <div class="recent-orders mt-4">
        <div class="recent-orders-header">
          <div class="chart-title">Recent Orders</div>
          <a href="#" class="view-all">View All</a>
        </div>
        <table>
          <thead>
            <tr>
              <th>Item</th>
              <th>Date</th>
              <th>Total</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody id="recent-orders-table">
            <!-- Orders will be populated here -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Top Lists -->
    <div class="top-lists-container">
      <div class="top-list-card">
        <h3 class="top-list-title">Best Selling Products (Top 10)</h3>
        <ul class="top-list" id="top-products-list">
          <!-- Will be populated by JavaScript -->
        </ul>
      </div>

      <div class="top-list-card">
        <h3 class="top-list-title">Best Selling Categories (Top 10)</h3>
        <ul class="top-list" id="top-categories-list">
          <!-- Will be populated by JavaScript -->
        </ul>
      </div>

      <div class="top-list-card">
        <h3 class="top-list-title">Best Selling Brands (Top 10)</h3>
        <ul class="top-list" id="top-brands-list">
          <!-- Will be populated by JavaScript -->
        </ul>
      </div>
    </div>
  </div>

  <script>
    // Sample data - In a production environment, you would fetch this from your backend API
    const mockOrdersData = [
      {
        _id: '1',
        createdAt: '2023-03-20T12:30:00',
        items: [
          { 
            title: 'Mens Black T-Shirts',
            price: 75,
            status: 'PROCESSING'
          }
        ],
        totalAmount: 75
      },
      {
        _id: '2',
        createdAt: '2023-03-19T10:15:00',
        items: [
          { 
            title: 'Essential Neutrals',
            price: 22,
            status: 'PROCESSING'
          }
        ],
        totalAmount: 22
      },
      {
        _id: '3',
        createdAt: '2023-02-07T14:45:00',
        items: [
          { 
            title: 'Sleek and Cozy Black',
            price: 57,
            status: 'DELIVERED'
          }
        ],
        totalAmount: 57
      },
      {
        _id: '4',
        createdAt: '2023-01-29T09:20:00',
        items: [
          { 
            title: 'MOCKUP Black',
            price: 30,
            status: 'DELIVERED'
          }
        ],
        totalAmount: 30
      }
    ];

    // Mock data for best selling products, categories, and brands
    const topProducts = [
      { name: 'Classic Black T-Shirt', sales: 940 },
      { name: 'Premium Denim Jeans', sales: 785 },
      { name: 'Casual White Sneakers', sales: 650 },
      { name: 'Essential Hoodie', sales: 520 },
      { name: 'Comfortable Lounge Pants', sales: 495 },
      { name: 'Basic Cotton Socks (5-Pack)', sales: 410 },
      { name: 'Slim Fit Oxford Shirt', sales: 385 },
      { name: 'Leather Belt', sales: 320 },
      { name: 'Knit Beanie', sales: 280 },
      { name: 'Canvas Backpack', sales: 245 }
    ];

    const topCategories = [
      { name: 'T-Shirts', sales: 2100 },
      { name: 'Jeans', sales: 1750 },
      { name: 'Sneakers', sales: 1450 },
      { name: 'Accessories', sales: 1200 },
      { name: 'Outerwear', sales: 980 },
      { name: 'Formal Wear', sales: 850 },
      { name: 'Sportswear', sales: 780 },
      { name: 'Underwear', sales: 650 },
      { name: 'Socks', sales: 580 },
      { name: 'Hats', sales: 450 }
    ];

    const topBrands = [
      { name: 'FashionCore', sales: 3200 },
      { name: 'UrbanTrend', sales: 2800 },
      { name: 'ClassicWear', sales: 2300 },
      { name: 'SportElite', sales: 1950 },
      { name: 'LuxuryLine', sales: 1700 },
      { name: 'EssentialBasics', sales: 1550 },
      { name: 'StreetStyle', sales: 1400 },
      { name: 'ComfortZone', sales: 1250 },
      { name: 'EcoFriendly', sales: 1100 },
      { name: 'VintageVibes', sales: 950 }
    ];
    

        
    // Function to format date
    function formatDate(dateString) {
      const date = new Date(dateString);
      return `${date.getDate()} ${date.toLocaleString('default', { month: 'short' })}, ${date.getFullYear()}`;
    }

    // Populate recent orders table
    function populateRecentOrders() {
      const tableBody = document.getElementById('recent-orders-table');
      tableBody.innerHTML = '';

      mockOrdersData.forEach(order => {
        const item = order.items[0];
        const tr = document.createElement('tr');
        
        tr.innerHTML = `
          <td>${item.title}</td>
          <td>${formatDate(order.createdAt)}</td>
          <td>$${order.totalAmount.toFixed(2)}</td>
          <td>
            <span class="status-badge ${item.status === 'DELIVERED' ? 'status-completed' : 'status-processing'}">
              ${item.status === 'DELIVERED' ? 'Completed' : 'Processing'}
            </span>
          </td>
        `;
        
        tableBody.appendChild(tr);
      });
    }

    // Populate top lists
    function populateTopLists() {
      const productsListEl = document.getElementById('top-products-list');
      const categoriesListEl = document.getElementById('top-categories-list');
      const brandsListEl = document.getElementById('top-brands-list');
      
      // Products
      topProducts.forEach(product => {
        const li = document.createElement('li');
        li.className = 'top-list-item';
        li.innerHTML = `
          <span class="top-list-name">${product.name}</span>
          <span class="top-list-value">$${product.sales}</span>
        `;
        productsListEl.appendChild(li);
      });
      
      // Categories
      topCategories.forEach(category => {
        const li = document.createElement('li');
        li.className = 'top-list-item';
        li.innerHTML = `
          <span class="top-list-name">${category.name}</span>
          <span class="top-list-value">$${category.sales}</span>
        `;
        categoriesListEl.appendChild(li);
      });
      
      // Brands
      topBrands.forEach(brand => {
        const li = document.createElement('li');
        li.className = 'top-list-item';
        li.innerHTML = `
          <span class="top-list-name">${brand.name}</span>
          <span class="top-list-value">$${brand.sales}</span>
        `;
        brandsListEl.appendChild(li);
      });
    }

    // Initialize Charts
    function initCharts(data) {
      const {dailySales,sales,dailyUserCount,totalUserCount}=data
      const formatedDailySales=dailySales.map(d=>d.total)
      const formatedDailyUserCount=dailyUserCount.map(d=>d.count)
      console.log(formatedDailyUserCount)
      console.log(totalUserCount)
       
      // init textValues
      const totalSalesEL=document.getElementById('total-sales')
      const totalCustomerEL=document.getElementById('total-customers')
      


      totalSalesEL.textContent=sales.totalRevenue
      totalCustomerEL.textContent=totalUserCount
   

      const totalOrdersEl=document.getElementById('total-orders')
      const ordersLeftEl=document.getElementById('orders-left')
      const progressBar=document.querySelector('.progress-bar')
      const targetOrder=100
      const orderLeft=targetOrder-sales.orderCount
      const remainPercentage=sales.orderCount/targetOrder*100
      console.log(remainPercentage)
      

      totalOrdersEl.textContent=sales.orderCount
      ordersLeftEl.textContent=orderLeft
      progressBar.style.width=remainPercentage+'%'
      // Sales small chart
      const salesChartCtx = document.getElementById('sales-chart').getContext('2d');
      const salesChart = new Chart(salesChartCtx, {
        type: 'bar',
        data: {
          labels: Array(30).fill(''),
          datasets: [{
            data: formatedDailySales,
            backgroundColor: '#4361ee',
            borderRadius: 4,
            barThickness: 4,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              enabled: false
            }
          },
          scales: {
            x: {
              display: false,
            },
            y: {
              display: false,
            }
          }
        }
      });

      // Customers small chart
      const customersChartCtx = document.getElementById('customers-chart').getContext('2d');
      const customersChart = new Chart(customersChartCtx, {
        type: 'line',
        data: {
          labels: Array(10).fill(''),
          datasets: [{
            data: formatedDailyUserCount,
            borderColor: '#4361ee',
            tension: 0.4,
            pointRadius: 0,
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              enabled: false
            }
          },
          scales: {
            x: {
              display: false,
            },
            y: {
              display: false,
            }
          }
        }
      });

      // Doughnut chart for best selling
      const doughnutChartCtx = document.getElementById('doughnut-chart').getContext('2d');
      const doughnutChart = new Chart(doughnutChartCtx, {
        type: 'doughnut',
        data: {
          labels: ['Completed', 'Remaining'],
          datasets: [{
            data: [75, 25],
            backgroundColor: [
              '#4361ee',
              '#e9ecef',
            ],
            borderWidth: 0,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '75%',
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              enabled: false
            }
          }
        }
      });

      // Main sales chart with filter
      const mainSalesChartCtx = document.getElementById('main-sales-chart').getContext('2d');
      
      // Weekly data (default)
      const weeklyData = {
        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
        datasets: [{
          label: 'Sales',
          data: [1200, 1900, 1700, 2400],
          borderColor: '#4361ee',
          backgroundColor: 'rgba(67, 97, 238, 0.1)',
          tension: 0.4,
          fill: true,
        }]
      };
      
      // Monthly data
      const monthlyData = {
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        datasets: [{
          label: 'Sales',
          data: [4200, 5100, 5800, 6200, 6100, 7200, 7800, 8400, 8700, 9100, 9400, 10000],
          borderColor: '#4361ee',
          backgroundColor: 'rgba(67, 97, 238, 0.1)',
          tension: 0.4,
          fill: true,
        }]
      };
      
      // Daily data
      const dailyData = {
        labels: Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`),
        datasets: [{
          label: 'Sales',
          data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 500) + 100),
          borderColor: '#4361ee',
          backgroundColor: 'rgba(67, 97, 238, 0.1)',
          tension: 0.4,
          fill: true,
        }]
      };
      
      // Yearly data
      const yearlyData = {
        labels: ['2020', '2021', '2022', '2023', '2024'],
        datasets: [{
          label: 'Sales',
          data: [48000, 61000, 75000, 92000, 103000],
          borderColor: '#4361ee',
          backgroundColor: 'rgba(67, 97, 238, 0.1)',
          tension: 0.4,
          fill: true,
        }]
      };

      const mainSalesChart = new Chart(mainSalesChartCtx, {
        type: 'line',
        data: weeklyData,
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false,
            }
          },
          scales: {
            x: {
              grid: {
                display: false
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                borderDash: [5, 5]
              }
            }
          }
        }
      });

      // Filter buttons event listeners
      const filterButtons = document.querySelectorAll('.filter-btn');
      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          filterButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          this.classList.add('active');
          
          // Update chart data based on selected period
          const period = this.dataset.period;
          let chartData;
          
          switch(period) {
            case 'daily':
              chartData = dailyData;
              break;
            case 'weekly':
              chartData = weeklyData;
              break;
            case 'monthly':
              chartData = monthlyData;
              break;
            case 'yearly':
              chartData = yearlyData;
              break;
            default:
              chartData = weeklyData;
          }
          
          mainSalesChart.data = chartData;
          mainSalesChart.update();
        });
      });
    }

    // Initialize the dashboard
   async function initDashboard() {
    try {
      const response=await fetch('/admin/dashboard-details')
      const data=await response.json()
      console.log(data)
      populateRecentOrders();
      populateTopLists();
      initCharts(data);
      
    } catch (error) {
      console.log(error)
    }
     
   
    }

    // Run initialization when DOM is loaded
    document.addEventListener('DOMContentLoaded', initDashboard);
    
  </script>
</body>
</html>